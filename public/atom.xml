<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Moin World!</title>
  <subtitle>Everything around coding and the web.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://moin.world/"/>
  <updated>2017-04-01T13:04:50.000Z</updated>
  <id>https://moin.world/</id>
  
  <author>
    <name>Dominik Kundel</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How We Hacked Our Coffee Machine with JavaScript</title>
    <link href="https://moin.world/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/"/>
    <id>https://moin.world/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/</id>
    <published>2017-04-01T08:00:00.000Z</published>
    <updated>2017-04-01T13:04:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>IoT or “smart home” devices are probably the biggest current buzzword aside of “blockchain”. But why buy smart devices if you can turn your existing device into an IoT version. We decided to do exactly that and build an internet-enabled coffee machine using JavaScript and revive the <a href="https://www.ietf.org/rfc/rfc2324.txt" target="_blank" rel="external">Hyper Text Coffee Pot Control Protocol</a> for its 19th birthday.</p>
<p><img src="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/geek-and-poke-iot.jpg" alt="Comic strip from Geek &amp; Poke about their coffee machine unfollowing them on Twitter"></p>
<h3 id="Story-Time"><a href="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/#Story-Time" class="headerlink" title="Story Time"></a>Story Time</h3><p>My flatmate and I already have a few internet-enabled devices in our apartment that we can control using our Amazon Echo Dots. It’s definitely convenient (read lazy). But the thing that is really missing is being able to trigger the coffee machine right from the bed.</p>
<p>Luckily my flatmate had a DeLonghi Latissima standing around that he wasn’t too emotionally attached to and that had electronic buttons which made this whole system <em>seem</em> hackable. </p>
<p>But why would we use JavaScript? Well my flatmate isn’t a developer and I haven’t written a single line of C++ in 3 years. JavaScript on the other hand is a language that I’m quite comfortable with. Hardware and JavaScript also both have a very event-driven focus, both center around events like “was this button pressed?”. Additionally, it seemed like one more challenge since there is definitely less documentation about hardware-hacking with JavaScript.</p>
<h3 id="The-Hardware-Options"><a href="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/#The-Hardware-Options" class="headerlink" title="The Hardware Options"></a>The Hardware Options</h3><p>I was planning to do a hardware hack with JavaScript for a while and I had a couple of different options flying around my apartment already that we all considered for the hack:</p>
<h4 id="Espruino"><a href="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/#Espruino" class="headerlink" title="Espruino"></a>Espruino</h4><p><img src="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/espruino-header.png" alt="Espruino Logo"></p>
<p><a href="https://www.espruino.com/" target="_blank" rel="external">Espruino</a> is an open source firmware that lets you run JavaScript on low power microcontrollers such as the ESP8266 or <a href="https://www.espruino.com/Order" target="_blank" rel="external">one of their own boards</a>. </p>
<p>Espruino comes with a Web-based IDE that allows you to easily write JavaScript and deploy it to your hardware. It also provides a variety of modules with module system similar to the Node.js one. However, it is not Node.js that is running on the microcontrollers.</p>
<p>The only Espruino board that I had at home was an Espruino Pico which also doesn’t contain WiFi. I could have soldered an ESP8266 onto it for WiFi but who got time for that? We want coffee!</p>
<h4 id="Tessel"><a href="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/#Tessel" class="headerlink" title="Tessel"></a>Tessel</h4><p><img src="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/tessel-header.png" alt="Logo of Tessel"></p>
<p>The next alternative is another open source hardware project called <a href="https://tessel.io/" target="_blank" rel="external">Tessel</a>. Part of the Tessel project is the Tessel 2. A piece of hardware that can not only be controlled with JavaScript but it can run full <a href="https://nodejs.org" target="_blank" rel="external">Node.js</a> and it can store the whole program on the hardware so we don’t have to keep a computer connected to it.</p>
<p><img src="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/tessel-photo.jpg" alt="Photo of a Tessel 2 board"></p>
<h4 id="Johnny-Five"><a href="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/#Johnny-Five" class="headerlink" title="Johnny-Five"></a>Johnny-Five</h4><p><img src="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/johnny-five-header.png" alt="Logo of Johnny Five"></p>
<p>The third alternative was to use <a href="http://johnny-five.io/" target="_blank" rel="external">Johnny-Five</a>. It is actually an <a href="https://www.npmjs.com/package/johnny-five" target="_blank" rel="external">npm module</a> that can talk to a variety of microcontrollers. Initially it uses the <a href="https://github.com/firmata/protocol" target="_blank" rel="external">Firmata protocol</a> to talk to Arduinos, but there are also a <a href="http://johnny-five.io/platform-support/" target="_blank" rel="external">variety of other platforms</a> that can be controlled with Johnny-Five via I/O plug-ins. This way we could for example use a <a href="https://www.particle.io/products/hardware/photon-wifi-dev-kit" target="_blank" rel="external">Particle Photon</a>, a <a href="https://www.raspberrypi.org/" target="_blank" rel="external">Raspberry PI</a> or even the <a href="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/https;//tessel.io">Tessel 2</a>. </p>
<h4 id="Our-Choice"><a href="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/#Our-Choice" class="headerlink" title="Our Choice"></a>Our Choice</h4><p>We decided to go for the combination of Tessel and Johnny-Five. This way we can write code that is fairly platform agnostic and yet have code that can be run directly on the hardware without having to have a computer connected to it or run some code in the cloud.</p>
<h3 id="Trust-Me-I’m-An-Engineer"><a href="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/#Trust-Me-I’m-An-Engineer" class="headerlink" title="Trust Me I’m An Engineer"></a>Trust Me I’m An Engineer</h3><p>Alright now that we knew what tools we would use it was time to start hacking! Since hardware doesn’t have a version control systems let’s have a last look at our beautiful and <strong>working</strong> coffee machine and store it in our memories:</p>
<p><img src="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/original-latissima.jpg" alt="Picture of original Latissima"></p>
<p>Now let’s get going! We are both not electrical engineers and while I did study two semesters in university, I don’t remember anything. </p>
<p><img src="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/dog-floating-space.gif" alt="Dog floating in space with caption I have no clue what I&#39;m doing here"></p>
<blockquote>
<p><strong>Important!</strong> We’ll be working with hardware that can get very hot and with electricity. Some of the stuff we are doing from this point on is neither smart or nor a safe approach. So if you do the same, you do it on your own risk.<br><img src="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/homer-electro-shock.gif" alt="Gif of Homer getting an electro shock"></p>
</blockquote>
<p>So how do you get started with hardware hacking when you have no clue? </p>
<p>Well we decided to do the most obvious thing and just take it apart and have a look! So bye bye screws!</p>
<p><img src="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/open-latissima.jpg" alt="Picture of opened Latissima"></p>
<p>There is quite some stuff to see here. But what is of interest? I mean we don’t want to change the way the coffee is brewed but just trigger the brewing process and turn the coffee machine on/off. </p>
<p>Luckily this seems doable. Because if we look closely we can see that the control plate that holds the buttons and the microcontroller that controls the brewing process are connected via a cable a normal pluggable cable.</p>
<p><img src="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/open-latissima-annotated-2.png" alt="Annotated Picture of opened Latissima highlighting Buttons and Microcontroller"></p>
<p>So if we can emulate the signal that is sent between the control plate and the microprocessor we would be able to control the coffee machine. Now we only need to figure out what the signal is. </p>
<h3 id="What-Are-We-Doing-Here"><a href="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/#What-Are-We-Doing-Here" class="headerlink" title="What Are We Doing Here?"></a>What Are We Doing Here?</h3><p>To figure out what the signal is that is being sent around, let’s first take a look at the control plate:</p>
<p><img src="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/control-plate.jpg" alt="Picture of control plate with buttons and LEDs"></p>
<p>We can see the following interesting components on it:</p>
<ul>
<li>a plug with 8 pins</li>
<li>7 LEDs</li>
<li>6 button switches</li>
</ul>
<p>Our theory is that there must be at least one pin of those eight that has to provide power. Since the cable has one of the eight wires marked red we figured that this might be power. So what do the other 7 pins do? If we think like a programmer we could use a binary flag to represent the states of the 7 LEDs and 6 switches, we would need to use 3 pins for the LEDs and 3 for the switches. What is the last pin doing though?</p>
<p>Based on our theory that the first pin is power, let’s connect some power to it and see what happens to the other pins when we press them. For that we connected the one end of the original wire to the control plate and jammed a bunch of jumper wires into the other end. This way we can connect the 7 unknown pins to our Tessel pins. </p>
<p><img src="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/wireup.jpg" alt="Picture of cable with jumper wires in it"></p>
<p>For power we can choose from a 3.3V and a 5V connection. We tried connecting 3.3V first and saw that the LEDs barely lit up. So we tried 5V (<em>very scientific work going on here</em>) and it worked! Well it <em>semi-</em>worked. Three of our 7 LEDs (<code>LED4</code>, <code>LED5</code>, <code>LED6</code>) lit up. It’s still progress!</p>
<p>The Tessel comes with analog and digital pins. This means we can measure voltage at those pins just as well as a digital signal (high/low aka 0 and 1). Our first attempt was to measure the voltage on the remaining pins. </p>
<p>We wrote a small script for our Tessel that would initialize the connection to the board using Johnny-Five and creates pin instances in analog mode (<code>mode: 2</code>). It would then inject these pins into the Johnny-Five REPL so that we could measure their values whenever we wanted.</p>
<figure class="highlight js"><figcaption><span>analogread.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> five = <span class="built_in">require</span>(<span class="string">'johnny-five'</span>);</div><div class="line"><span class="keyword">const</span> Tessel = <span class="built_in">require</span>(<span class="string">'tessel-io'</span>);</div><div class="line"><span class="keyword">const</span> board = <span class="keyword">new</span> five.Board(&#123;</div><div class="line">  <span class="attr">io</span>: <span class="keyword">new</span> Tessel()</div><div class="line">&#125;);</div><div class="line">board.on(<span class="string">'ready'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> p2 = <span class="keyword">new</span> five.Pin(&#123; </div><div class="line">    <span class="attr">pin</span>: <span class="string">'b1'</span>,</div><div class="line">    <span class="attr">mode</span>: <span class="number">2</span> </div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">const</span> p3 = <span class="keyword">new</span> five.Pin(&#123; </div><div class="line">    <span class="attr">pin</span>: <span class="string">'b2'</span>,</div><div class="line">    <span class="attr">mode</span>: <span class="number">2</span> </div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">const</span> p4 = <span class="keyword">new</span> five.Pin(&#123; </div><div class="line">    <span class="attr">pin</span>: <span class="string">'b3'</span>,</div><div class="line">    <span class="attr">mode</span>: <span class="number">2</span> </div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">const</span> p5 = <span class="keyword">new</span> five.Pin(&#123; </div><div class="line">    <span class="attr">pin</span>: <span class="string">'b4'</span>,</div><div class="line">    <span class="attr">mode</span>: <span class="number">2</span> </div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">const</span> p6 = <span class="keyword">new</span> five.Pin(&#123; </div><div class="line">    <span class="attr">pin</span>: <span class="string">'b5'</span>,</div><div class="line">    <span class="attr">mode</span>: <span class="number">2</span> </div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">const</span> p7 = <span class="keyword">new</span> five.Pin(&#123; </div><div class="line">    <span class="attr">pin</span>: <span class="string">'b6'</span>,</div><div class="line">    <span class="attr">mode</span>: <span class="number">2</span> </div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">const</span> p8 = <span class="keyword">new</span> five.Pin(&#123; </div><div class="line">    <span class="attr">pin</span>: <span class="string">'b7'</span>, </div><div class="line">    <span class="attr">mode</span>: <span class="number">2</span> </div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">const</span> pins = [p2, p3, p4, p5, p6, p7, p8];</div><div class="line">  board.repl.inject(&#123; <span class="attr">pins</span>: pins &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Unfortunately, the analog reading wasn’t getting us where we wanted. The measurements were to fluctuating and therefore we couldn’t get any information out of it. So maybe digital readings would help us better:</p>
<figure class="highlight js"><figcaption><span>analogread.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> five.Pin(&#123; </div><div class="line marked">  <span class="attr">pin</span>: <span class="string">'b1'</span><span class="comment">/*,</span></div><div class="line marked">  mode: 2 */</div><div class="line">&#125;);</div><div class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> five.Pin(&#123; </div><div class="line marked">  <span class="attr">pin</span>: <span class="string">'b2'</span><span class="comment">/*,</span></div><div class="line marked">  mode: 2 */</div><div class="line">&#125;);</div><div class="line"><span class="keyword">const</span> p4 = <span class="keyword">new</span> five.Pin(&#123; </div><div class="line marked">  <span class="attr">pin</span>: <span class="string">'b3'</span><span class="comment">/*,</span></div><div class="line marked">  mode: 2 */</div><div class="line">&#125;);</div><div class="line"><span class="keyword">const</span> p5 = <span class="keyword">new</span> five.Pin(&#123; </div><div class="line marked">  <span class="attr">pin</span>: <span class="string">'b4'</span><span class="comment">/*,</span></div><div class="line marked">  mode: 2 */</div><div class="line">&#125;);</div><div class="line"><span class="keyword">const</span> p6 = <span class="keyword">new</span> five.Pin(&#123; </div><div class="line marked">  <span class="attr">pin</span>: <span class="string">'b5'</span><span class="comment">/*,</span></div><div class="line marked">  mode: 2 */</div><div class="line">&#125;);</div><div class="line"><span class="keyword">const</span> p7 = <span class="keyword">new</span> five.Pin(&#123; </div><div class="line marked">  <span class="attr">pin</span>: <span class="string">'b6'</span><span class="comment">/*,</span></div><div class="line marked">  mode: 2 */</div><div class="line">&#125;);</div><div class="line"><span class="keyword">const</span> p8 = <span class="keyword">new</span> five.Pin(&#123; </div><div class="line marked">  <span class="attr">pin</span>: <span class="string">'b7'</span><span class="comment">/*,</span></div><div class="line marked">  mode: 2 */</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>With this setup we were playing around for a bit to see if we can control the LEDs or figure something else out. And we did! After trying to set the digital pins to <code>HIGH</code> and <code>LOW</code> respectively we figured out that Pin 4-6 were able to turn the LEDs <code>LED4</code>, <code>LED5</code> and <code>LED7</code> on and off. We weren’t able to turn the other LEDs on though. But at least we knew these were connected to the LEDs. So we knew 4 pins. What’s with the others?</p>
<p><img src="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/homer-confusion.gif" alt="Gif of Homer confusingly sorting through stuff"></p>
<p>Maybe they are buttons! We initialized the other pins as buttons and tried if that worked:</p>
<figure class="highlight js"><figcaption><span>analogread.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">  board.repl.inject(&#123; <span class="attr">pins</span>: pins &#125;);</div><div class="line marked">  <span class="keyword">const</span> btn2 = <span class="keyword">new</span> five.Button(<span class="string">'b1'</span>);</div><div class="line marked">  <span class="keyword">const</span> btn3 = <span class="keyword">new</span> five.Button(<span class="string">'b2'</span>);</div><div class="line marked">  <span class="keyword">const</span> btn7 = <span class="keyword">new</span> five.Button(<span class="string">'b6'</span>);</div><div class="line marked">  <span class="keyword">const</span> btn8 = <span class="keyword">new</span> five.Button(<span class="string">'b7'</span>);</div><div class="line marked">  <span class="keyword">const</span> buttons = [btn2, btn3, btn7, btn8];</div><div class="line marked">  buttons.forEach(<span class="function"><span class="params">btn</span> =&gt;</span> &#123;</div><div class="line marked">    btn.on(<span class="string">'press'</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">'Pressed button no.%d'</span>, btn.pin));</div><div class="line marked">    btn.on(<span class="string">'release'</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">'Released button no.%d'</span>, btn.pin));</div><div class="line marked">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>This is also highlighting one strength of JavaScript and Hardware. Every JavaScript developer will immediately feel at home here. We have a <code>EventEmitter</code> based class <code>Button</code> that has a <code>&#39;release&#39;</code> and <code>&#39;press&#39;</code> event that we can listen on.</p>
<p>And we measured something!!! If we pressed the top two switches we could detect <code>btn7</code> and <code>btn8</code> triggering their events, if we pressed the two bottom right ones also <code>btn7</code> and <code>btn8</code> trigger. And if we set <code>p3</code> to <code>HIGH</code> we can detect the behavior as for the other two.</p>
<p><img src="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/control-plate.jpg" alt="Picture of control plate with buttons and LEDs"></p>
<p>So what do we know?</p>
<ul>
<li>Pin 1 is <img class="emojione" alt="⚡" title=":zap:" src="https://cdn.jsdelivr.net/emojione/assets/png/26a1.png?v=2.2.7">️ (turns on LED4, LED5, LED7)</li>
<li>Pin 4-6 can turn off <img class="emojione" alt="💡" title=":bulb:" src="https://cdn.jsdelivr.net/emojione/assets/png/1f4a1.png?v=2.2.7"> LED4, <img class="emojione" alt="💡" title=":bulb:" src="https://cdn.jsdelivr.net/emojione/assets/png/1f4a1.png?v=2.2.7"> LED5, <img class="emojione" alt="💡" title=":bulb:" src="https://cdn.jsdelivr.net/emojione/assets/png/1f4a1.png?v=2.2.7"> LED7</li>
<li>Pin 7-8 react on Switches (S1-S6)</li>
<li>Pin 2 can manipulate S3 &amp;&amp; S4</li>
<li>Pin 3 can manipulate S1 &amp;&amp; S2</li>
</ul>
<p>Alright that’s something but not great. How are we supposed to figure out which button is pressed? It’s great that we can (de)activate them but we want to know when they are pressed. After 5h of digging in the dark it’s time for a strategy change!</p>
<p><img src="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/monkey-laptop.gif" alt="Gif of monkey pushing down a laptop"></p>
<h3 id="Back-To-The-Drawing-Board"><a href="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/#Back-To-The-Drawing-Board" class="headerlink" title="Back To The Drawing Board"></a>Back To The Drawing Board</h3><p><img src="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/fritzing-header.png" alt="Logo of the Friting software"></p>
<p>Let’s approach this in a more systematic way and try to understand what is happening in the circuit on the board. To do so we took the picture of the board, zoomed into it and traced the lines on it. We then verified an assumed connection between to points by measuring the resistance between the two points using a multimeter. If we found a connection we used a tool called <a href="http://fritzing.org/home/" target="_blank" rel="external">Fritzing</a> to mark up the connection in a diagram. Fritzing is a great open source tool to mark up hardware setups. On our diagram we skipped everything that seemed like a resistor. The result was this beautiful diagram:</p>
<p><img src="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/original-schema.png" alt="Schema of circuit with LEDs and Switches"></p>
<p>I know what you are thinking. This looks worse than before. But it wasn’t. The first thing that was easier for us to figure out was the LED connections. The important thing about LEDs to know is that they let current pass through in only one direction. Having them marked up in the diagram allowed us to follow the current and get a better understanding of the whole circuit. </p>
<p>Not only Pin 1 is power but also Pin 2 and 3 are power! That explains why the other LEDs weren’t lighting up. But what about the switches?</p>
<p>After 8 hours of slow progress and staring on this tiny board we realized that we missed one thing all along! </p>
<p><img src="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/control-plate-diodes.png" alt="Control Plate with arrows pointing at the diodes"></p>
<p>These three things weren’t resistors. They were diodes!!! Diodes allow just like LEDs (Light Emitting Diodes) for current to only flow in one direction. So we updated our diagram, removed the LEDs (since we solved that puzzle) and cleaned up the diagram.</p>
<p><img src="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/schema-switches.png" alt="Schema of circuit with Diodes and Switches"></p>
<p>And we got it! We finally solved the secret of the mysterious protocol:</p>
<ul>
<li>S1 = P3 <img class="emojione" alt="➡" title=":arrow_right:" src="https://cdn.jsdelivr.net/emojione/assets/png/27a1.png?v=2.2.7"> P7</li>
<li>S2 = P3 <img class="emojione" alt="➡" title=":arrow_right:" src="https://cdn.jsdelivr.net/emojione/assets/png/27a1.png?v=2.2.7"> P8</li>
<li>S3 = P2 <img class="emojione" alt="➡" title=":arrow_right:" src="https://cdn.jsdelivr.net/emojione/assets/png/27a1.png?v=2.2.7"> P7</li>
<li>S4 = P2 <img class="emojione" alt="➡" title=":arrow_right:" src="https://cdn.jsdelivr.net/emojione/assets/png/27a1.png?v=2.2.7"> P8</li>
<li>S5 = P1 <img class="emojione" alt="➡" title=":arrow_right:" src="https://cdn.jsdelivr.net/emojione/assets/png/27a1.png?v=2.2.7"> P7</li>
<li>S6 = P1 <img class="emojione" alt="➡" title=":arrow_right:" src="https://cdn.jsdelivr.net/emojione/assets/png/27a1.png?v=2.2.7"> P8</li>
<li><img class="emojione" alt="💡" title=":bulb:" src="https://cdn.jsdelivr.net/emojione/assets/png/1f4a1.png?v=2.2.7"> LED7 (Power lamp) = P1 <img class="emojione" alt="➡" title=":arrow_right:" src="https://cdn.jsdelivr.net/emojione/assets/png/27a1.png?v=2.2.7"> P6</li>
<li>etc. </li>
</ul>
<h3 id="Did-Someone-Say-Coffee"><a href="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/#Did-Someone-Say-Coffee" class="headerlink" title="Did Someone Say Coffee?"></a>Did Someone Say Coffee?</h3><p>How can we make coffee with this knowledge though? Since the switches dependent on the power that is being sent between two pins, faking the protocol entirely will be complicated. But there is an easier solution. We can use relays!</p>
<p>Relays are like switches just that we can control them digitally with our microcontroller and since we know the full circuit of the control plate now, we can build the same circuit (or a part) ourselves and simply replace the switches with relays. </p>
<p>We only had 4 relays and therefore we decided to go for the right three switches which control large coffee, espresso and power. Exactly what we needed! We also wired up the respective three LEDs to have visual feedback if everything is working.</p>
<p><img src="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/setup_bb.png" alt="Diagram of the breadboard setup for the Tessel"></p>
<p>Our initial wire up obviously didn’t look as neat but more like this:</p>
<p><img src="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/first-wire-up.jpg" alt="Picture of the first wire up of the Tessel"></p>
<p>We didn’t have enough jumper wires so we had to plug our relay board up-side-down into the breadboard (so professional). </p>
<p>Now it was time to test our wire up. But before we turned on the coffee machine we had to write some code. We quickly threw together a small script that would allow us to manually control the three relays using the built-in <a href="http://johnny-five.io/api/relay/" target="_blank" rel="external"><code>Relay</code></a> class of <code>Johnny-Five</code> and inject them into the REPL.</p>
<figure class="highlight js"><figcaption><span>analogread.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> five = <span class="built_in">require</span>(<span class="string">'johnny-five'</span>);</div><div class="line"><span class="keyword">const</span> Tessel = <span class="built_in">require</span>(<span class="string">'tessel-io'</span>);</div><div class="line"><span class="keyword">const</span> board = <span class="keyword">new</span> five.Board(&#123;</div><div class="line">  <span class="attr">io</span>: <span class="keyword">new</span> Tessel()</div><div class="line">&#125;);</div><div class="line"></div><div class="line">board.on(<span class="string">'ready'</span>, () =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> espresso = <span class="keyword">new</span> five.Relay(&#123;</div><div class="line">    <span class="attr">pin</span>: <span class="string">'a4'</span>,</div><div class="line">    <span class="attr">type</span>: <span class="string">'NO'</span></div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">const</span> grande = <span class="keyword">new</span> five.Relay(&#123;</div><div class="line">    <span class="attr">pin</span>: <span class="string">'a5'</span>,</div><div class="line">    <span class="attr">type</span>: <span class="string">'NO'</span></div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">const</span> power = <span class="keyword">new</span> five.Relay(&#123;</div><div class="line">    <span class="attr">pin</span>: <span class="string">'a6'</span>,</div><div class="line">    <span class="attr">type</span>: <span class="string">'NO'</span></div><div class="line">  &#125;);</div><div class="line">  espresso.close();</div><div class="line">  grande.close();</div><div class="line">  power.close();</div><div class="line"></div><div class="line">  board.repl.inject(&#123;</div><div class="line">    <span class="attr">espresso</span>: espresso,</div><div class="line">    <span class="attr">grande</span>: grande,</div><div class="line">    <span class="attr">power</span>: power</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>With the code in place it was time to pour some water into the coffee machine, turn on the coffee machine via its master switch on the back of the device and power up our code. If everything worked we should be able to turn on the device by running <code>power.open()</code>. It has to heat up for 20 seconds (until the LED stops blinking). Afterwards it’s time to brew coffee! Or well water for our first test case:</p>
<p><img src="https://media.giphy.com/media/xUA7aSx31hrIoxUzQc/giphy-downsized-large.gif" alt="Gif of first run using the REPL"></p>
<p>Yay it’s alive! It took 10 hours and the sun had started to rise but hey we got coffee!!! Or well we got hot water because we forgot to buy the capsules that we needed for the Nespresso but well it’s a first step.</p>
<p><img src="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/celebration.gif" alt="Gif of cast of Friends jumping"></p>
<h3 id="The-Internet-of-Coffee-Pots"><a href="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/#The-Internet-of-Coffee-Pots" class="headerlink" title="The Internet of Coffee Pots"></a>The Internet of Coffee Pots</h3><p>Great so we can brew coffee if my laptop is connected to the Tessel that is connected to the coffee machine and if I then write some code into the REPL. Now that’s not really the internet of coffee pots that we have here. Time to change that! </p>
<p>Luckily on this day 19 years ago there were some smart folks that developed the most life changing protocol in the world! The <a href="https://www.ietf.org/rfc/rfc2324.txt" target="_blank" rel="external">Hyper Text Coffee Pot Control Protocol</a> or short HTCPCP for the purpose of being able to control internet-enabled coffee pots. If that isn’t a sign that we should revive this forgotten protocol in 2017 and use it to control our coffee machine.</p>
<h4 id="What-is-HTCPCP"><a href="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/#What-is-HTCPCP" class="headerlink" title="What is HTCPCP?"></a>What is HTCPCP?</h4><p>So as you might have noticed HTCPCP is an April fools from 1998. The reason why it’s great is that it suggested as part of the RFC an HTTP status code <code>418 - I&#39;m a teapot</code>. This status code is up to today not an actual standard, yet a lot of software uses it as small easter eggs. Take Google for example: <a href="https://google.com/teapot" target="_blank" rel="external">google.com/teapot</a>.</p>
<p>But it suggests more than just this one status code so let’s look at a couple of things.</p>
<ol>
<li>It’s based on HTTP</li>
<li>It suggests a <code>BREW</code> method aside of <code>POST</code> to be able to issue a brewing command</li>
<li>It defines a <code>coffee://</code> URI schema to be able to address different coffee pots</li>
<li>It even internationalizes this URI schema. I highly suggest you reading that section. I’ll wait here.</li>
<li>It suggests a new <code>Accept-Additions</code> header for you to be able to specify if you want some milk, whiskey or a pumpkin-spiced latte.</li>
<li>It clearly defines the <code>Content-Type</code> and messages that can be passed.</li>
<li>And much more.</li>
</ol>
<p>In other words it’s destined to be implemented!</p>
<p>But before we get started we need to talk about some uncertainities and shortcomings of this RFC.</p>
<p>The document mentions twice two different <code>Content-Type</code> values that should be used. One is <code>application/coffee-pot-command</code> and one is <code>message/coffeepot</code>. Since we can’t use both we decided to to go for <code>application/coffee-pot-command</code> as the <code>Content-Type</code> that will be sent to the coffee machine and <code>message/coffeepot</code> is the response type.</p>
<p>Additionally, we have to deal with the fact that our coffee machine supports multiple types of coffees contrary to a standard coffee pot from 1997. Therefore we have to modify our URI schema to deal with that: <code>coffee://host/pot-{identifier}/{coffee type}</code>. This is important because the <code>application/coffee-pot-command</code> only supports <code>start</code> and <code>stop</code> as official values.</p>
<p>Let’s implement it!</p>
<h4 id="418-I-39-m-a-teapot"><a href="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/#418-I-39-m-a-teapot" class="headerlink" title="418 - I&#39;m a teapot"></a><code>418 - I&#39;m a teapot</code></h4><p><img src="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/teapot.gif" alt="Gif of a happy teapot"></p>
<p>Since HTCPCP is based on HTTP we figured that for convenience and integration reasons we will just implement a standard HTTP server using <a href="https://nodejs.org" target="_blank" rel="external">Node.js</a> and the <a href="https://nodejs.org/api/http.html" target="_blank" rel="external"><code>http</code> module</a>. In order to keep the code itself lightweight for the Tessel we decided to not use any library like Express and rather go with old school naive routing using the URL. </p>
<p>We also split up all the logic to interact with the hardware into it’s own file. This way we can easily swap it out for another coffee machine later and use the same server logic. </p>
<figure class="highlight js"><figcaption><span>latissima.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> EventEmittter = <span class="built_in">require</span>(<span class="string">'events'</span>);</div><div class="line"><span class="keyword">const</span> &#123; Board, Relay, Pin &#125; = <span class="built_in">require</span>(<span class="string">'johnny-five'</span>);</div><div class="line"><span class="keyword">const</span> <span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">'bluebird'</span>);</div><div class="line"><span class="keyword">const</span> Tessel = <span class="built_in">require</span>(<span class="string">'tessel-io'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> PRESS_DURATION = <span class="number">500</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Latissima</span> <span class="keyword">extends</span> <span class="title">EventEmittter</span> </span>&#123;</div><div class="line">  <span class="comment">// Board</span></div><div class="line">  board = <span class="literal">undefined</span>;</div><div class="line"></div><div class="line">  <span class="comment">// Relays</span></div><div class="line">  espressoRelay = <span class="literal">undefined</span>;</div><div class="line">  grandeRelay = <span class="literal">undefined</span>;</div><div class="line">  powerRelay = <span class="literal">undefined</span>;</div><div class="line"></div><div class="line">  <span class="comment">// Others</span></div><div class="line">  <span class="comment">// The coffee machine is automatically on when you flip the master switch</span></div><div class="line">  isOn = <span class="literal">true</span>; </div><div class="line">  <span class="comment">// No this isn't a teapot</span></div><div class="line">  isTeapot = <span class="literal">false</span>;</div><div class="line">  </div><div class="line">  <span class="comment">// Available Additions</span></div><div class="line">  additions = [];</div><div class="line"></div><div class="line">  <span class="comment">// Coffee Types</span></div><div class="line">  <span class="keyword">static</span> Types = &#123;</div><div class="line">    <span class="attr">espresso</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">grande</span>: <span class="number">2</span></div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>(debug = false) &#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    <span class="keyword">this</span>.board = <span class="keyword">new</span> Board(&#123;</div><div class="line">      <span class="attr">io</span>: <span class="keyword">new</span> Tessel(),</div><div class="line">      <span class="attr">repl</span>: debug,</div><div class="line">      <span class="attr">debug</span>: debug</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.board.on(<span class="string">'ready'</span>, () =&gt; &#123;</div><div class="line">      <span class="keyword">this</span>.initializePins();</div><div class="line">      <span class="keyword">this</span>.emit(<span class="string">'ready'</span>);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  initializePins() &#123;</div><div class="line">    <span class="keyword">this</span>.espressoRelay = <span class="keyword">new</span> Relay(&#123;</div><div class="line">      <span class="attr">pin</span>: <span class="string">'a4'</span>,</div><div class="line">      <span class="attr">type</span>: <span class="string">'NO'</span></div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">this</span>.espressoRelay.close();</div><div class="line">    <span class="keyword">this</span>.grandeRelay = <span class="keyword">new</span> Relay(&#123;</div><div class="line">      <span class="attr">pin</span>: <span class="string">'a5'</span>,</div><div class="line">      <span class="attr">type</span>: <span class="string">'NO'</span></div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">this</span>.grandeRelay.close();</div><div class="line">    <span class="keyword">this</span>.powerRelay = <span class="keyword">new</span> Relay(&#123;</div><div class="line">      <span class="attr">pin</span>: <span class="string">'a6'</span>,</div><div class="line">      <span class="attr">type</span>: <span class="string">'NO'</span></div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">this</span>.powerRelay.close();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  pressPower() &#123;</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.isOn) &#123;</div><div class="line">      <span class="comment">// it needs to heat up for ~20 seconds</span></div><div class="line">      <span class="comment">// <span class="doctag">TODO:</span> Remove this when we can read if the machine is on</span></div><div class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">this</span>.isOn = <span class="literal">true</span>;</div><div class="line">      &#125;, <span class="number">21</span> * <span class="number">1000</span>)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">this</span>.isOn = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.pressButton(<span class="keyword">this</span>.powerRelay);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// Convinience function to press different coffee types</span></div><div class="line">  press(type) &#123;</div><div class="line">    <span class="keyword">switch</span>(type) &#123;</div><div class="line">      <span class="keyword">case</span> Latissima.Types.espresso:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.pressButton(<span class="keyword">this</span>.espressoRelay);</div><div class="line">      <span class="keyword">case</span> Latissima.Types.grande:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.pressButton(<span class="keyword">this</span>.grandeRelay);</div><div class="line">      <span class="keyword">default</span>:</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Could not find Type"</span>));</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// Emulate the push of a button by opening</span></div><div class="line">  <span class="comment">// the respective relay, wait for a certain</span></div><div class="line">  <span class="comment">// time and closing it again</span></div><div class="line">  pressButton(relay) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">      relay.open();</div><div class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        relay.close();</div><div class="line">        resolve();</div><div class="line">      &#125;, PRESS_DURATION);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123; Latissima &#125;;</div></pre></td></tr></table></figure>
<p>Some features of JavaScript that we used in here were not available in the Node version on the Tessel yet so we transpiled it to ES5 compatible code using <a href="https://typescriptlang.org" target="_blank" rel="external">TypeScript</a>. </p>
<p>As for the server we decided to implement the following subset of features:</p>
<h4 id="1-GET-POST-and-BREW"><a href="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/#1-GET-POST-and-BREW" class="headerlink" title="1. GET, POST and BREW"></a>1. <code>GET</code>, <code>POST</code> and <code>BREW</code></h4><p>We implemented the acceptance of the <code>BREW</code> method as well as traditional <code>GET</code> to get the status of the coffee machine and <code>POST</code> to issue commands. </p>
<figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (req.method === <span class="string">'GET'</span>) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'GET'</span>);</div><div class="line">  res.setHeader(<span class="string">'Safe'</span>, <span class="string">'yes'</span>);</div><div class="line">  res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'message/coffeepot'</span>);</div><div class="line">  <span class="keyword">if</span> (req.url.indexOf(<span class="string">'/pot-0/'</span>) === <span class="number">0</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'TYPE INFO'</span>);</div><div class="line">    <span class="comment">// <span class="doctag">TODO:</span> Implement status of coffee production</span></div><div class="line">    <span class="keyword">let</span> data = [];</div><div class="line">    res.write(data.join(<span class="string">'\n'</span>));</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.url.indexOf(<span class="string">'/pot-0'</span>) === <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">let</span> data = [<span class="string">'isOn='</span>+coffeeMachine.isOn]</div><div class="line">    res.write(data.join(<span class="string">'\n'</span>));</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    res.statusCode = <span class="number">404</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> res.end();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (req.method === <span class="string">'POST'</span> || req.method === <span class="string">'BREW'</span>) &#123;</div></pre></td></tr></table></figure>
<h4 id="2-Content-Type-verification"><a href="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/#2-Content-Type-verification" class="headerlink" title="2. Content-Type verification"></a>2. <code>Content-Type</code> verification</h4><p>We only accept <code>application/coffee-pot-command</code> and <code>text/plain</code> as valid content types for <code>POST</code> and <code>BREW</code> requests. We had to add <code>text/plain</code> for our later integration with Alexa.</p>
<figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasCorrectContentType</span>(<span class="params">req</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> req.headers[<span class="string">'content-type'</span>] === <span class="string">'application/coffee-pot-command'</span></div><div class="line">    || req.headers[<span class="string">'content-type'</span>] ===  <span class="string">'text/plain'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-Initial-Accept-Additions-support"><a href="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/#3-Initial-Accept-Additions-support" class="headerlink" title="3. Initial Accept-Additions support"></a>3. Initial <code>Accept-Additions</code> support</h4><p>With just four relays we didn’t have enough to control the full functionality of the coffee machine and therefore our coffee machine doesn’t support any additions. However, we did add verification of the header and the correct behavior when someone orders an addition that our coffee machine doesn’t support. Which, at the moment, are all additions.</p>
<figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAdditionsRequested</span>(<span class="params">req</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> header = req.headers[<span class="string">'accept-additions'</span>];</div><div class="line">  <span class="keyword">let</span> milkType = [<span class="string">'Cream'</span>, <span class="string">'Half-and-half'</span>, <span class="string">'Whole-milk'</span>, <span class="string">'Part-Skim'</span>, <span class="string">'Skim'</span>, <span class="string">'Non-Dairy'</span>];</div><div class="line">  <span class="keyword">let</span> syrupType = [<span class="string">'Vanilla'</span>, <span class="string">'Almond'</span>, <span class="string">'Raspberry'</span>, <span class="string">'Chocolate'</span>];</div><div class="line">  <span class="keyword">let</span> alcoholType = [<span class="string">'Whisky'</span>, <span class="string">'Rum'</span>, <span class="string">'Kahlua'</span>, <span class="string">'Aquavit'</span>];</div><div class="line">  <span class="keyword">let</span> spiceType = []; <span class="comment">/** NO LIST DEFINIED IN RFC */</span></div><div class="line">  <span class="keyword">let</span> validTypes = [</div><div class="line">    <span class="string">'*'</span>, </div><div class="line">    ...milkType,</div><div class="line">    ...syrupType,</div><div class="line">    ...alcoholType,</div><div class="line">    ...spiceType</div><div class="line">  ];</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (!header) &#123;</div><div class="line">    <span class="keyword">return</span> [];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> header.split(<span class="string">';'</span>)</div><div class="line">    .map(<span class="function"><span class="params">type</span> =&gt;</span> type.trim())</div><div class="line">    .filter(<span class="function"><span class="params">type</span> =&gt;</span> validTypes.indexOf(type) !== <span class="number">-1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-418-I-39-m-a-teapot"><a href="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/#4-418-I-39-m-a-teapot" class="headerlink" title="4. 418 - I&#39;m a teapot"></a>4. <code>418 - I&#39;m a teapot</code></h4><p>Well obviously, we had to implement this trivial check that simply checks if the coffee pot that is connected to our server is in fact a disguised tea pot. In which case we return the appropriate status code.</p>
<figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleRequests</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (coffeeMachine.isTeapot) &#123;</div><div class="line">    res.statusCode = <span class="number">418</span>;</div><div class="line">    res.statusMessage = <span class="string">"I'm a teapot"</span>;</div><div class="line">    res.write(<span class="string">"I'm a teapot"</span>);</div><div class="line">    <span class="keyword">return</span> res.end();</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h4 id="What-we-didn’t-implement"><a href="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/#What-we-didn’t-implement" class="headerlink" title="What we didn’t implement:"></a>What we didn’t implement:</h4><p>We are currently unable to programatically check for the state of the coffee machine. The LEDs are showing the respective state but we have to solve the problem of being able to detect this state inside the Tessel 2. Otherwise, we are not able to properly implement the <code>Safe</code> header or the <code>GET</code> status.</p>
<p>While we did implement a basic version of the <code>coffee://</code> schema we didn’t implement the full thing and had to alter it. Else, we would have had a way harder time using this with other platforms such as Amazon Alexa.</p>
<p>In order to make the Tessel easily addressable we installed additionally the <a href="https://npmjs.com/package/localtunnel" target="_blank" rel="external">localtunnel module</a> to create an externally addressable URL.</p>
<p>And it works! <img class="emojione" alt="🎉" title=":tada:" src="https://cdn.jsdelivr.net/emojione/assets/png/1f389.png?v=2.2.7"> You can see a working version of the HTCPCP protocol here:</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/L_kzjHtkGPE" frameborder="0" allowfullscreen></iframe></div>
<p>The full code is also available on GitHub.</p>
<div style="text-align:center">
  <div class="github-card" data-user="dkundel" data-repo="htcpcp-delonghi" data-width="400" data-theme="default" data-target="" data-client-id="" data-client-secret=""></div>
</div>
<script src="/github-card-lib/githubcard.js"></script>

<h3 id="IFTTC-If-This-Then-Coffee"><a href="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/#IFTTC-If-This-Then-Coffee" class="headerlink" title="IFTTC - If This Then Coffee"></a>IFTTC - If This Then Coffee</h3><p>Now that we had a working HTTP server that we could use to control our coffee machine it was time to connect it to Alexa. The optimal solution here would be to build a Smart Home skill to be able to use it in combination with the other smart home devices in the household. However, time is valuable so let’s try a quicker approach: <a href="https://ifttt.com" target="_blank" rel="external">IFTTT</a> (If-This-Then-That).</p>
<p>Luckily, Alexa allows you to build simple skills using IFTTT and IFTTT allows you to make HTTP <code>POST</code> requests. That’s all we need to control our coffee machine!</p>
<p><a href="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/ifttt-alexa-example.png"><img src="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/ifttt-alexa-example.png" alt="Example Alexa IFTTT Skill"></a></p>
<p>We spun up three skills. One that turns on the coffee machine if it’s in stand-by, one that makes a normal coffee and one that makes espresso.</p>
<p><img src="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/alexa-skills.png" alt="Screenshot of all Alexa IFTTT Skills"></p>
<p>The great thing was that it was easy as it sounds. In just 3 minutes we had our Alexa integration done. But see for yourself:</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/JHUi334R9zw" frameborder="0" allowfullscreen></iframe></div>
<h3 id="What’s-Next"><a href="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/#What’s-Next" class="headerlink" title="What’s Next?"></a>What’s Next?</h3><p>We are still super excited that we got this initial version but obviously there is so much work left of things we have to, should and can do. Some of the things on our agenda are:</p>
<ul>
<li>Figuring out how we can determine the state of the coffee machine programatically</li>
<li>Add more relays to have the full functionality ready</li>
<li>Use some sensor to determine if a cup is under the coffee machine</li>
<li>Figure out how we can make Irish coffee aka. how do we get Whiskey in the coffee</li>
<li>Make a casing for the whole setup to be neatly placed on top of the coffee machine</li>
<li>Add a <a href="https://www.twilio.com/" target="_blank" rel="external">Twilio</a> integration so that we can trigger the coffee brewing even remotely without Alexa</li>
<li>Find a solution for the problem that we manually need to place a new Nespresso cap into the device</li>
</ul>
<p>Basically every day this list is getting longer because we have some new cool idea and I’m certain you might have an idea, too, what we should do. If you do, make sure to send me a tweet <a href="https://twitter.com/dkundel" target="_blank" rel="external">@dkundel</a>. We would love to hear your ideas!</p>
<h3 id="Conclusion"><a href="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>It was great doing this little side project. Our modern devices are so closed up that we rarely anymore open devices to check up what’s going on on the inside. I must also say that working with the <a href="https://tessel.io" target="_blank" rel="external">Tessel 2</a>, <a href="http://johnny-five.io" target="_blank" rel="external">Johnny-Five</a> and JavaScript was amazing. It’s a great way to get started in hardware hacking. I personally have a <a href="https://www.sparkfun.com/products/13847" target="_blank" rel="external">Johnny-Five Inventors Kit from Sparkfun</a> at home and I can’t wait to find some time and play around with other pieces in the kit for more projects.</p>
<p>I think JavaScript’s event-oriented approach is a perfect match for hardware. Sure if you want to build the most energy and space efficient project you should resort back to writing C++ but for hacking projects like this it’s a great solution.</p>
<p>All in all, this was a fun project and it was great to combine finally exploring hardware hacking with reading and implementing the <a href="https://www.ietf.org/rfc/rfc2324.txt" target="_blank" rel="external">HTCPCP RFC</a>. I hope we were able to inspire you to explore the field of hardware hacking and if you do something make sure to let us know <a href="https://twitter.com/dkundel" target="_blank" rel="external">on Twitter</a>! Maybe somone of you will hack their toaster next <img class="emojione" alt="😉" title=":wink:" src="https://cdn.jsdelivr.net/emojione/assets/png/1f609.png?v=2.2.7"></p>
<p><img src="/2017/04/01/how-we-hacked-our-coffee-machine-with-javascript/toaster.gif" alt="Gif of toaster"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IoT or “smart home” devices are probably the biggest current buzzword aside of “blockchain”. But why buy smart devices if you can turn yo
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Moin World!</title>
    <link href="https://moin.world/2017/03/27/moin-world/"/>
    <id>https://moin.world/2017/03/27/moin-world/</id>
    <published>2017-03-27T19:03:33.000Z</published>
    <updated>2017-03-27T19:03:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hello or “Moin! Moin!” how you would say in Northern Germany.</p>
<p><img src="http://i.giphy.com/ypqHf6pQ5kQEg.gif" alt="GIF of seal waving &quot;sup&quot;"></p>
<p>My name is Dominik Kundel, I’m a software developer from Bremen, Germany and currently working as a developer evangelist for <a href="https://wwww.twilio.com" target="_blank" rel="external">Twilio</a> from Berlin, Germany. </p>
<div class="twitter-wrapper"><blockquote class="twitter-tweet"><a href="https://twitter.com/DKundel/status/837750944674820096" target="_blank" rel="external"></a></blockquote></div><script async defer src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>I recently found this domain as available and figured it’s the perfect opportunity to create a new blog. I’ll be writing about all sorts of coding related topics but you can be guaranteed that a lot of it will be about <a href="https://nodejs.org" target="_blank" rel="external">Node.js</a>, JavaScript and the web in general and maybe some Swift <img class="emojione" alt="🙂" title=":slightly_smiling_face:" src="https://cdn.jsdelivr.net/emojione/assets/png/1f642.png?v=2.2.7">.</p>
<p>This blog is powered by <a href="https://hexo.io" target="_blank" rel="external">Hexo</a> and will be fully open source on <a href="https://github.com/dkundel/moin.world" target="_blank" rel="external">GitHub</a>.</p>
<div style="text-align:center">
  <div class="github-card" data-user="dkundel" data-repo="moin.world" data-width="400" data-theme="default" data-target="" data-client-id="" data-client-secret=""></div>
</div>
<script src="/github-card-lib/githubcard.js"></script>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hello or “Moin! Moin!” how you would say in Northern Germany.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.giphy.com/ypqHf6pQ5kQEg.gif&quot; alt=&quot;GIF of seal wav
    
    </summary>
    
      <category term="general" scheme="https://moin.world/categories/general/"/>
    
    
      <category term="general" scheme="https://moin.world/tags/general/"/>
    
  </entry>
  
</feed>
